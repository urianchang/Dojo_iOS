In GameScene.swift...

override func didMove(to view: SKView) {

//: Check for current time
let current = NSDate()
let formatter = DateFormatter()
formatter.dateFormat = "HH"
let currentHour = formatter.string(from: current as Date)
print ("Current hour is \(currentHour)")

//: Display appropriate background based on time
var bgname = String()
if Int(currentHour)! > 7 && Int(currentHour)! < 18 {
    bgname = "daySky.png"
} else {
    bgname = "nightSky.png"
}
let background = SKSpriteNode(imageNamed: bgname)
background.size = self.frame.size
background.position = CGPoint(x: frame.size.width/2, y: frame.size.height/2)
addChild(background)

}


==BY DEFAULT==
//class GameScene: SKScene {
//
//    var entities = [GKEntity]()
//    var graphs = [String : GKGraph]()
//
//    private var lastUpdateTime : TimeInterval = 0
//    private var label : SKLabelNode?
//    private var spinnyNode : SKShapeNode?
//
//    override func sceneDidLoad() {
//
//        self.lastUpdateTime = 0
//
//        // Get label node from scene and store it for use later
//        self.label = self.childNode(withName: "//helloLabel") as? SKLabelNode
//        if let label = self.label {
//            label.alpha = 0.0
//            label.run(SKAction.fadeIn(withDuration: 2.0))
//        }
//
//        // Create shape node to use during mouse interaction
//        let w = (self.size.width + self.size.height) * 0.05
//        self.spinnyNode = SKShapeNode.init(rectOf: CGSize.init(width: w, height: w), cornerRadius: w * 0.3)
//
//        if let spinnyNode = self.spinnyNode {
//            spinnyNode.lineWidth = 2.5
//
//            spinnyNode.run(SKAction.repeatForever(SKAction.rotate(byAngle: CGFloat(M_PI), duration: 1)))
//            spinnyNode.run(SKAction.sequence([SKAction.wait(forDuration: 0.5),
//                                              SKAction.fadeOut(withDuration: 0.5),
//                                              SKAction.removeFromParent()]))
//        }
//    }
//
//
//    func touchDown(atPoint pos : CGPoint) {
//        if let n = self.spinnyNode?.copy() as! SKShapeNode? {
//            n.position = pos
//            n.strokeColor = SKColor.green
//            self.addChild(n)
//        }
//    }
//
//    func touchMoved(toPoint pos : CGPoint) {
//        if let n = self.spinnyNode?.copy() as! SKShapeNode? {
//            n.position = pos
//            n.strokeColor = SKColor.blue
//            self.addChild(n)
//        }
//    }
//
//    func touchUp(atPoint pos : CGPoint) {
//        if let n = self.spinnyNode?.copy() as! SKShapeNode? {
//            n.position = pos
//            n.strokeColor = SKColor.red
//            self.addChild(n)
//        }
//    }
//
//    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
//        if let label = self.label {
//            label.run(SKAction.init(named: "Pulse")!, withKey: "fadeInOut")
//        }
//
//        for t in touches { self.touchDown(atPoint: t.location(in: self)) }
//    }
//
//    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
//        for t in touches { self.touchMoved(toPoint: t.location(in: self)) }
//    }
//
//    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
//        for t in touches { self.touchUp(atPoint: t.location(in: self)) }
//    }
//
//    override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {
//        for t in touches { self.touchUp(atPoint: t.location(in: self)) }
//    }
//
//
//    override func update(_ currentTime: TimeInterval) {
//        // Called before each frame is rendered
//
//        // Initialize _lastUpdateTime if it has not already been
//        if (self.lastUpdateTime == 0) {
//            self.lastUpdateTime = currentTime
//        }
//
//        // Calculate time since last update
//        let dt = currentTime - self.lastUpdateTime
//
//        // Update entities
//        for entity in self.entities {
//            entity.update(deltaTime: dt)
//        }
//
//        self.lastUpdateTime = currentTime
//    }
//}

In the update function...
// Trying move to vs gravity vector...didn't turn out like I wanted.
//            let actionMove = SKAction.move(to: CGPoint(x: size.width * 0.1, y: size.height * 0.5), duration: 2.0)
//            let actionMoveDone = SKAction.removeFromParent()
//            airship.run(SKAction.sequence([actionMove]))

//        if Int(airship.position.y) == Int(size.height*0.5) {
//            print ("At the midpoint")
//            gravityVectorY.removeFromParent()
//            gravityVectorY = SKFieldNode.linearGravityField(withVector: vector_float3(0, 0, 0))
//        } else if Int(airship.position.y) > Int(size.height*0.5) {
//            print ("Above")
//            gravityVectorY.removeFromParent()
//            gravityVectorY = SKFieldNode.linearGravityField(withVector: vector_float3(0, -1, 0))
//        } else if Int(airship.position.y) < Int(size.height*0.5) {
//            print ("Below")
//            gravityVectorY.removeFromParent()
//            gravityVectorY = SKFieldNode.linearGravityField(withVector: vector_float3(0, 1, 0))
//        }
//        gravityVectorY.strength = 1.0
//        addChild(gravityVectorY)

//        print (airship.position.y)
//        print (size.height*0.5)


In didMove to...(mainly for debugging)
//        //: Add balloons and friends
//        let redBall = SKSpriteNode(imageNamed: "redBalloon")
//        redBall.setScale(0.15)
//        let yellowBall = SKSpriteNode(imageNamed: "yellowBalloon")
//        yellowBall.setScale(0.15)
//        let pinkBall = SKSpriteNode(imageNamed: "pinkBalloon")
//        pinkBall.setScale(0.15)
//        let friend = SKSpriteNode(imageNamed: "hotAir")
//        friend.setScale(0.28)
//
//        redBall.position = CGPoint(x: size.width * 0.3, y: size.height * 0.5)
//        yellowBall.position = CGPoint(x: size.width * 0.5, y: size.height * 0.5)
//        pinkBall.position = CGPoint(x: size.width * 0.7, y: size.height * 0.5)
//        friend.position = CGPoint(x: size.width * 0.9, y: size.height * 0.5)
//
//        addChild(redBall)
//        addChild(yellowBall)
//        addChild(pinkBall)
//        addChild(friend)

For speech synthesizer...
import AVFoundation
let string = "Hooray!"
let utterance = AVSpeechUtterance(string:string)
utterance.voice = AVSpeechSynthesisVoice(language: "en-US")
let synthesizer = AVSpeechSynthesizer()
synthesizer.speak(utterance)

afconvert -f caff -d LEI16@22050 yourInput.mp3 yourOutput.caf


class GameScene: SKScene {

override init(size: CGSize) {
    super.init(size: size)
}
required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
}
override func didMove(to view: SKView) {
    print ("Game started with ship \(userShip)")
}
override func update(_ currentTime: TimeInterval) {
}

}
